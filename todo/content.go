// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// content/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contentIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xd1\x53\xa3\x3a\x14\xc6\xdf\x77\x66\xff\x87\xc8\x6b\x85\x2c\x82\x95\xde\x01\x67\xb4\xb7\xee\x16\xed\x16\xad\xb6\xb5\x6f\x01\x42\x09\x0d\x09\x24\x87\x22\xfe\xf5\x77\xac\x76\xed\xee\xac\x77\xee\x9d\x7d\x22\xf9\x08\x67\xbe\xef\x77\x38\xf1\x8f\x52\x99\x40\x57\x51\x94\x43\xc9\xcf\x3f\x7f\xf2\x5f\x9e\x88\x13\xb1\x0e\x0c\x2a\x8c\xf3\xcf\x9f\x10\xf2\x73\x4a\xd2\xdd\x0a\x21\xff\xc8\x34\xd1\x1d\xad\x1b\xa6\x68\x8a\x4a\x0a\x04\x01\x59\x6b\x64\x9a\xfb\x03\x3b\x2d\xc9\x89\xd2\x14\x02\xa3\x81\xcc\xf4\x8c\x9f\xde\x09\x52\xd2\xc0\xd8\x32\xda\x56\x52\x81\x81\x12\x29\x80\x0a\x08\x8c\x96\xa5\x90\x07\x29\xdd\xb2\x84\x9a\xbb\xcd\x31\x62\x82\x01\x23\xdc\xd4\x09\xe1\x34\xb0\x8f\x91\xce\x15\x13\x1b\x13\xa4\x99\x31\x08\x84\x7c\xa9\x7d\x60\xed\x52\x4a\xd0\xa0\x48\x85\x86\xb3\xd9\x81\x2b\xce\xc4\x06\x29\xca\x03\x43\x43\xc7\xa9\xce\x29\x05\x03\xe5\x8a\x66\x81\x91\x03\x54\xfa\x2f\x8c\x35\x90\x64\x53\x11\xc8\xad\x78\x5f\x25\x49\x85\x95\xc8\x12\xff\x10\xb0\x6b\xd9\x96\x83\x13\xad\xdf\x35\xab\x64\xc2\x4a\xb4\x36\x10\x13\x40\xd7\x8a\x41\x17\x18\x3a\x27\x8e\xe7\x9a\x93\x61\x3b\xf0\xf0\xec\x4a\x7c\x1d\x79\x59\x78\xef\x7c\x5d\xb6\xa3\xa9\x58\xeb\xf9\xd9\x0a\x4e\xce\xbe\x2f\xaf\x24\x91\x17\x55\xf9\x58\x7a\x36\x6b\x96\x32\xda\x5c\x4d\xc3\x36\xf4\x46\x77\xe9\x46\xdc\x44\x93\xa9\x81\x12\x25\xb5\x96\x8a\xad\x99\x08\x0c\x22\xa4\xe8\x4a\xd9\xe8\x83\xd8\xc0\x80\xd3\xf3\x6f\x94\x73\x79\x8c\x5a\xa9\x78\x7a\xe4\xe3\x57\x71\xd7\x3d\xfc\xa3\x7d\x7e\x2c\xd3\x6e\x4f\x24\xb7\x7f\xfd\x26\xb7\x7f\x66\x39\xad\x80\x49\x41\x38\x0a\xc9\x96\xcc\x12\xc5\x2a\x38\x20\xfa\x72\xa2\xb8\x6d\xa8\xea\x50\xc6\x94\x86\x63\x04\x39\x15\x28\x92\x55\x45\x95\x55\xe8\xb7\xfd\x7b\x43\xc2\xc3\x7e\xe8\xd7\x72\x5a\x25\xef\xfc\x13\x99\x52\xab\xa8\x5f\x4a\xee\xa0\xbf\x2e\x4d\xc7\x72\x2c\xdb\xd2\x9c\x95\x3b\xd0\xc5\x6f\x39\xd7\x1e\xc3\xcb\xde\xa0\x7f\xfa\xf7\xf3\xf4\x8b\xba\x3f\x23\xf1\xb5\x6b\x87\x33\xb8\x1d\x5f\xd4\xf3\xf5\xdd\xfc\xb9\x8a\x9f\xe5\xa9\x2e\x97\xd7\x95\xfb\x98\xdd\x6d\xbf\xf5\x3c\x12\xc3\xfd\xc8\x8e\x58\xbf\x60\xcf\xf2\x63\xce\x3e\x7e\xf5\xfa\xaf\xce\x53\x51\x68\x2b\xe1\xb2\x49\x33\x4e\x14\xdd\xd9\x27\x05\x79\xc2\x9c\xc5\x1a\x57\x7b\x26\xd8\xb6\x6c\xd7\x72\x70\x53\xa6\x7b\xf1\xe3\x48\xab\x49\x74\xa6\xe6\xd2\x29\xc7\xdd\x66\xde\x3b\xe9\x0d\x42\xe7\x21\x74\xfb\xc5\xe5\xe6\xcb\xe2\x86\x3c\x5c\xa4\xa2\xef\x0d\xc8\xb0\x95\x75\x7c\x19\xb2\x99\x28\x2e\xae\x31\xf7\x16\xdb\xe1\x22\x1a\x47\xa5\x3b\xf8\xb3\x48\xff\x63\x18\x8a\x5f\x67\xe1\xf7\x79\x86\x79\x56\xd7\x4f\xcd\xea\x61\x28\xc2\xd9\xb5\xd3\x9b\x2c\xcb\xe8\xfb\xb8\x1b\xf5\x57\xf1\x22\x3f\x19\x4f\xea\xd1\x89\x6b\xab\x47\x56\x87\x4f\xdd\x84\xad\xfa\xd3\x05\x0e\xcb\xd5\xed\xa9\x86\x76\xf4\x70\x73\xdf\xfd\xc7\x3c\x3e\x7e\xfb\xcb\x7d\xfc\x76\xa7\xfd\x13\x00\x00\xff\xff\x99\xd1\x14\x3b\xe5\x04\x00\x00")

func contentIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_contentIndexHtml,
		"content/index.html",
	)
}

func contentIndexHtml() (*asset, error) {
	bytes, err := contentIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "content/index.html", size: 1253, mode: os.FileMode(438), modTime: time.Unix(1541374796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"content/index.html": contentIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"content": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{contentIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
